The Coin Change Problem (CC)
----------------------------

Hay varias versiones del problema del cambio de moneda ilustrando la
situación en la cual hay unas monedas de ciertas denominaciones y una
cantidad de dinero que se desea cambiar con dichas monedas. En algunos
casos se desea determinar la mínima cantidad de monedas necesarias
para obtener el cambio, en otras solo es de interés saber la mínima
cantidad de denominaciones empleadas, etc. En esta sesión se estudia
la primera variante del problema del cambio de moneda, en la cual se
supone hay una cantidad ilimitada de monedas de cada una de las
denominaciones.

  Entrada: Un arreglo D[0..N) de números enteros positivos, N>=0, y
           un número natural X.

  Salida : Mínima cantidad de monedas de denominaciones en D[0..N)
           para obtener cambio X.


Para resolver el problema, inicialmente se propone una versión más
general de este por medio de la siguiente función:

  phi(n,x): Mínima cantidad de monedas de denominaciones en D[0..n)
            para obtener cambio x.

Note que si se cuenta con una implementación de phi, entonces el problema
original se resuelve con el llamado

  phi(N,X).

Se procede a plantear una definición recurrente de phi, para
0 <= n <=N y 0 <= x <= X, de la siguiente manera:

              0                                 , n=0 y x=0

              + oo                              , n=0 y x!=0
  phi(n,x) =
              phi(n-1,x)                        , n!=0 y D[n-1]>x

              min(phi(n-1,x),                   , n!=0 y D[n-1]<=x
                  1+(phi(n,x-D[n-1])))

El primer caso en la definición de phi considera la situación en la
cual no hay monedas disponibles y se quiere obtener cambio para $0. En
este caso, no se requieren monedas y por ello phi(0,0)=0. En el
segundo caso, se quiere obtener cambio para una cantidad de dinero
distinta de $0 cuando no hay monedas disponibles. En este caso, como
obtener cambio es imposible, la función evalúa a 'infinito' (i.e., es
imposible). En tercer caso, hay monedas de al menos una denominación,
pero una moneda de denominación D[n-1] es mayor que la cantidad que
desea cambiar; en este caso, esta denominación se
descarta. Finalmente, cuando hay al menos una denominación, monedas de
esta se pueden o no usar para obtener el cambio x. Entonces, o se
ignora la denominación o se usa una moneda de esta denominación; en el
último caso se emplea una moneda.

A continución se presenta una implementación directa de phi en el
lenguaje de programación Python:

INF = float('inf')
D = None

def phi(n,x):
  """Coin change for denominations in D"""
  global INF,D
  ans = None
  if n==0 and x==0: ans = 0
  elif n==0 and x!=0: ans = INF
  elif n!=0 and D[n-1]>x: ans = phi(n-1,x)
  else: ans = min(phi(n-1,x),1+phi(n,x-D[n-1]))
  return ans

Note que la complejidad temporal del algoritmo es exponencial en N: en
caso recurrente, se pueden hacer dos llamados.

A continuación se presenta una implementación de la función
(matemática) phi con tabulación:

def phi_tab(X):
  """Coin change for denominations in D with tabulation"""
  N = len(D)
  tab = [ [ INF for x in range(X+1) ] for n in range(N+1) ] ; tab[0][0] = 0
  n,x = 1,0
  while n!=N+1:
    if x==X+1: n,x = n+1,0
    else:
      tab[n][x] = tab[n-1][x]
      if D[n-1]<=x: tab[n][x] = min(tab[n][x],1+tab[n][x-D[n-1]])
      x += 1
  return tab[N][X]

Los invariantes del ciclo principal son los siguientes:

  P0 : (Ai,j | 0<=i<n and 0<=j<=X : tab[i][j]=phi(i,j))

  P1 : (Aj | 0<=j<x : tab[n][j]=phi(n,j))

  P2 : 0 <= n <= N+1

  P3 : 0 <= x <= X+1

La complejidad temporal de esta implementación con tabulación es
O(NX), al igual que su complejidad espacial.

A continuación se presenta una implementación por tabulación que usa
menos memoria que la versión anterior del algoritmo:

def phi_tabv2(X):
  """Coin change for denominations in D with tabulation and memory
     optimization"""
  N = len(D)
  tab = [ INF for x in range(X+1) ] ; tab[0] = 0
  n,x = 1,0
  while n!=N+1:
    if x==X+1: n,x = n+1,0
    else:
      if D[n-1]<=x: tab[x] = min(tab[x],1+tab[x-D[n-1]])
      x += 1
  return tab[X]

Los invariantes del ciclo principal son los siguientes:

  P0 : (Aj | x <= j <= X: tab[j]=phi(n-1,j))

  P1 : (Aj | 0 <= j < x: tab[j]=phi(n,j))

  P2 : 0 <= n <= N+1

  P3 : 0 <= x <= X+1

Mientras que la complejidad temporal de este algoritmo es la misma
del algoritmo por tabulación anterior, su complejidad espacial es
mejor: O(X).

